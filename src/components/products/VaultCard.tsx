'use client';

import Link from 'next/link';
import { Abi } from 'viem';

import useRockOnyxVaultQueries from '@/hooks/useRockOnyxVaultQueries';
import { toCompactNumber, withCommas } from '@/utils/number';

import Tooltip from '../shared/Tooltip';
import {
  CurrencyVaultIcon,
  EthereumVaultIcon,
  InformationIcon,
  TVaultIcon,
  VaultIcon,
} from '../shared/icons';

type VaultCardProps = {
  name: string;
  link?: string;
  apy?: number;
  maxCapacity?: number;
  color?: 'default' | 'secondary';
  available?: boolean;
  vaultAbi?: Abi;
  vaultAddress?: `0x${string}`;
};

const VaultCard = (props: VaultCardProps) => {
  const {
    name,
    link = '#',
    apy = 0,
    maxCapacity,
    color = 'default',
    available = true,
    vaultAbi,
    vaultAddress,
  } = props;

  const { isLoadingTotalValueLocked, totalValueLocked } = useRockOnyxVaultQueries(
    vaultAbi,
    vaultAddress,
  );

  const badgeBg = color === 'default' ? 'bg-[#0E8484] bg-opacity-40' : 'bg-[#313C69] bg-opacity-60';

  return (
    <Link href={link} className="bg-white bg-opacity-5 rounded-2xl border border-rock-divider">
      <div className="relative rounded-tl-2xl rounded-tr-2xl p-6 pb-10 xl:pb-14">
        <div
          className="absolute inset-0 rounded-tl-2xl rounded-tr-2xl"
          style={{
            opacity: 0.4,
            background:
              color === 'default'
                ? 'linear-gradient(180deg, #0E8484 -60%, rgba(5, 41, 41) 70%)'
                : 'linear-gradient(180deg, #313C69 -10%, rgba(31, 38, 66) 80%)',
          }}
        />
        <div className="relative flex items-center gap-2">
          <p
            className={`w-fit ${badgeBg} rounded-lg px-4 py-2 uppercase text-xs xl:text-sm font-semibold`}
          >
            {name}
          </p>
          <span className={`${badgeBg} rounded-lg px-1.5 py-1.5 xl:px-2.5 xl:py-2`}>
            <VaultIcon className="w-5 h-5" />
          </span>
        </div>
        <div className="flex items-center gap-1 absolute -bottom-6 xl:-bottom-8">
          {color === 'default' ? (
            <>
              <TVaultIcon className="w-12 h-12 xl:w-16 xl:h-16" />
              <CurrencyVaultIcon className="w-12 h-12 xl:w-16 xl:h-16" />
            </>
          ) : (
            <EthereumVaultIcon className="w-12 h-12 xl:w-16 xl:h-16" />
          )}
        </div>
      </div>

      <div className="flex flex-col gap-6 px-6 pt-10 xl:pt-16 pb-6">
        <p className="text-lg xl:text-xl 2xl:text-2xl font-semibold uppercase">{name}</p>

        <div>
          <div className="flex items-center gap-2">
            <p className="text-sm font-semibold text-rock-sub-body">APY</p>

            <Tooltip
              message={
                <div>
                  <div className="flex justify-between text-sm text-rock-sub-body">
                    <p className="text-rock-light-blue">APY</p>
                    <p className="text-rock-light-blue justify-self-end">{`${withCommas(apy)}%`}</p>
                  </div>
                  <p className="text-sm font-normal break-words mt-2">
                    Vault yield is calculated by annualizing monthly yield generated by the vault.
                    The monthly yield does not include any losses incurred by the vault
                  </p>
                </div>
              }
            >
              <InformationIcon />
            </Tooltip>
          </div>
          <p className="text-lg xl:text-2xl font-semibold">{`${withCommas(apy)}%`}</p>
        </div>

        <div>
          <p className="text-sm font-semibold text-rock-sub-body">Total value locked TVL</p>
          {!available ? (
            <p className="text-sm text-rock-yellow leading-8">Coming soon</p>
          ) : isLoadingTotalValueLocked ? (
            <p className="text-lg animate-pulse">Loading...</p>
          ) : (
            <p className="text-lg xl:text-2xl font-semibold">
              {totalValueLocked.toLocaleString('en-US', {
                style: 'currency',
                currency: 'USD',
                maximumFractionDigits: 0,
              })}
            </p>
          )}
        </div>

        <div className="flex flex-col gap-2 mt-2 xl:mt-8">
          <div className="w-full h-1 bg-rock-gray bg-opacity-20 rounded-full">
            <div
              className="h-1 bg-white rounded-full"
              style={{ width: `${maxCapacity ? (totalValueLocked * 100) / maxCapacity : 0}%` }}
            ></div>
          </div>
          <div className="flex items-center justify-between text-sm text-caption">
            <p className="text-rock-sub-body">Max Capacity</p>
            <p>{maxCapacity ? toCompactNumber(maxCapacity) : '--'}</p>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default VaultCard;
